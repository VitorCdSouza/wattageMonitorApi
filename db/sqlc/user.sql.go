// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (
  user_email,   
  user_password
) VALUES (
  $1, $2
)
RETURNING id, user_email, user_password
`

type CreateUserParams struct {
	UserEmail    string `json:"user_email"`
	UserPassword string `json:"user_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.UserEmail, arg.UserPassword)
	var i User
	err := row.Scan(&i.ID, &i.UserEmail, &i.UserPassword)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM "user"  
WHERE id = $1
RETURNING id, user_email, user_password
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, deleteUser, id)
	var i User
	err := row.Scan(&i.ID, &i.UserEmail, &i.UserPassword)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, user_email, user_password FROM "user"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.UserEmail, &i.UserPassword)
	return i, err
}

const listUser = `-- name: ListUser :many
SELECT id, user_email, user_password FROM "user"
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUserParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUser(ctx context.Context, arg ListUserParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUser, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.UserEmail, &i.UserPassword); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE "user"
  set user_email = $2,
  user_password = $3
WHERE id = $1
RETURNING id, user_email, user_password
`

type UpdateUserParams struct {
	ID           int64  `json:"id"`
	UserEmail    string `json:"user_email"`
	UserPassword string `json:"user_password"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.ID, arg.UserEmail, arg.UserPassword)
	var i User
	err := row.Scan(&i.ID, &i.UserEmail, &i.UserPassword)
	return i, err
}
