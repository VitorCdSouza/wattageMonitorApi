// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: device.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDevice = `-- name: CreateDevice :one
INSERT INTO "device" (
  device_name,
  room_id,
  user_id
) VALUES (
  $1, $2, $3
)
RETURNING id, device_name, room_id, user_id
`

type CreateDeviceParams struct {
	DeviceName string      `json:"device_name"`
	RoomID     pgtype.Int8 `json:"room_id"`
	UserID     pgtype.Int8 `json:"user_id"`
}

func (q *Queries) CreateDevice(ctx context.Context, arg CreateDeviceParams) (Device, error) {
	row := q.db.QueryRow(ctx, createDevice, arg.DeviceName, arg.RoomID, arg.UserID)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.DeviceName,
		&i.RoomID,
		&i.UserID,
	)
	return i, err
}

const deleteDevice = `-- name: DeleteDevice :one
DELETE FROM "device"  
WHERE id = $1
RETURNING id, device_name, room_id, user_id
`

func (q *Queries) DeleteDevice(ctx context.Context, id int64) (Device, error) {
	row := q.db.QueryRow(ctx, deleteDevice, id)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.DeviceName,
		&i.RoomID,
		&i.UserID,
	)
	return i, err
}

const getDevice = `-- name: GetDevice :one
SELECT id, device_name, room_id, user_id FROM "device"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDevice(ctx context.Context, id int64) (Device, error) {
	row := q.db.QueryRow(ctx, getDevice, id)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.DeviceName,
		&i.RoomID,
		&i.UserID,
	)
	return i, err
}

const listDevice = `-- name: ListDevice :many
SELECT id, device_name, room_id, user_id FROM "device"
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListDeviceParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListDevice(ctx context.Context, arg ListDeviceParams) ([]Device, error) {
	rows, err := q.db.Query(ctx, listDevice, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Device{}
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.DeviceName,
			&i.RoomID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDevice = `-- name: UpdateDevice :one
UPDATE "device"
  set device_name = $2,
  room_id = $3,
  user_id = $4
WHERE id = $1
RETURNING id, device_name, room_id, user_id
`

type UpdateDeviceParams struct {
	ID         int64       `json:"id"`
	DeviceName string      `json:"device_name"`
	RoomID     pgtype.Int8 `json:"room_id"`
	UserID     pgtype.Int8 `json:"user_id"`
}

func (q *Queries) UpdateDevice(ctx context.Context, arg UpdateDeviceParams) (Device, error) {
	row := q.db.QueryRow(ctx, updateDevice,
		arg.ID,
		arg.DeviceName,
		arg.RoomID,
		arg.UserID,
	)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.DeviceName,
		&i.RoomID,
		&i.UserID,
	)
	return i, err
}
