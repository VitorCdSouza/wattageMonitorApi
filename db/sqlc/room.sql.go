// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: room.sql

package db

import (
	"context"
)

const createRoom = `-- name: CreateRoom :one
INSERT INTO "room" (
  room_name
) VALUES (
  $1
)
RETURNING id, room_name
`

func (q *Queries) CreateRoom(ctx context.Context, roomName string) (Room, error) {
	row := q.db.QueryRow(ctx, createRoom, roomName)
	var i Room
	err := row.Scan(&i.ID, &i.RoomName)
	return i, err
}

const deleteRoom = `-- name: DeleteRoom :one
DELETE FROM "room"  
WHERE id = $1
RETURNING id, room_name
`

func (q *Queries) DeleteRoom(ctx context.Context, id int64) (Room, error) {
	row := q.db.QueryRow(ctx, deleteRoom, id)
	var i Room
	err := row.Scan(&i.ID, &i.RoomName)
	return i, err
}

const getRoom = `-- name: GetRoom :one
SELECT id, room_name FROM "room"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRoom(ctx context.Context, id int64) (Room, error) {
	row := q.db.QueryRow(ctx, getRoom, id)
	var i Room
	err := row.Scan(&i.ID, &i.RoomName)
	return i, err
}

const listRoom = `-- name: ListRoom :many
SELECT id, room_name FROM "room"
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListRoomParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListRoom(ctx context.Context, arg ListRoomParams) ([]Room, error) {
	rows, err := q.db.Query(ctx, listRoom, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Room{}
	for rows.Next() {
		var i Room
		if err := rows.Scan(&i.ID, &i.RoomName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRoom = `-- name: UpdateRoom :one
UPDATE "room"
  set room_name = $2
WHERE id = $1
RETURNING id, room_name
`

type UpdateRoomParams struct {
	ID       int64  `json:"id"`
	RoomName string `json:"room_name"`
}

func (q *Queries) UpdateRoom(ctx context.Context, arg UpdateRoomParams) (Room, error) {
	row := q.db.QueryRow(ctx, updateRoom, arg.ID, arg.RoomName)
	var i Room
	err := row.Scan(&i.ID, &i.RoomName)
	return i, err
}
