// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: reading.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createReading = `-- name: CreateReading :one
INSERT INTO "reading" (
  reading_wattage,
  device_id
) VALUES (
  $1, $2
)
RETURNING id, reading_wattage, reading_hour, device_id
`

type CreateReadingParams struct {
	ReadingWattage pgtype.Numeric `json:"reading_wattage"`
	DeviceID       pgtype.Int8    `json:"device_id"`
}

func (q *Queries) CreateReading(ctx context.Context, arg CreateReadingParams) (Reading, error) {
	row := q.db.QueryRow(ctx, createReading, arg.ReadingWattage, arg.DeviceID)
	var i Reading
	err := row.Scan(
		&i.ID,
		&i.ReadingWattage,
		&i.ReadingHour,
		&i.DeviceID,
	)
	return i, err
}

const deleteReading = `-- name: DeleteReading :one
DELETE FROM "reading"  
WHERE id = $1
RETURNING id, reading_wattage, reading_hour, device_id
`

func (q *Queries) DeleteReading(ctx context.Context, id int64) (Reading, error) {
	row := q.db.QueryRow(ctx, deleteReading, id)
	var i Reading
	err := row.Scan(
		&i.ID,
		&i.ReadingWattage,
		&i.ReadingHour,
		&i.DeviceID,
	)
	return i, err
}

const getReading = `-- name: GetReading :one
SELECT id, reading_wattage, reading_hour, device_id FROM "reading"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetReading(ctx context.Context, id int64) (Reading, error) {
	row := q.db.QueryRow(ctx, getReading, id)
	var i Reading
	err := row.Scan(
		&i.ID,
		&i.ReadingWattage,
		&i.ReadingHour,
		&i.DeviceID,
	)
	return i, err
}

const listReading = `-- name: ListReading :many
SELECT id, reading_wattage, reading_hour, device_id FROM "reading"
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListReadingParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListReading(ctx context.Context, arg ListReadingParams) ([]Reading, error) {
	rows, err := q.db.Query(ctx, listReading, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Reading{}
	for rows.Next() {
		var i Reading
		if err := rows.Scan(
			&i.ID,
			&i.ReadingWattage,
			&i.ReadingHour,
			&i.DeviceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
